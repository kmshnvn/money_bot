from datetime import date

from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

from database.database import db_get_transaction, db_get_category
from database.states import UserState
from keyboards.inline_keyboards import (
    delete_history_kb,
    change_success_transaction_details_kb,
)


async def check_delete_transaction(
    message: Message, state: FSMContext, split_text: str
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–µ callback).
    """
    try:
        logger.info(
            f"{message.chat.id} - –£—Ç–æ—á–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
        )

        transaction_id = int(split_text[3:])
        transaction = db_get_transaction(transaction_id, message.chat.id)

        if transaction:
            amount = float(transaction.get("amount"))
            summ = amount if amount >= 0 else -amount
            transaction_date = date.strftime(
                transaction["transaction_date"], "%d.%m.%Y"
            )

            await state.set_data(
                {
                    "delete_transaction": {
                        "id": transaction_id,
                        "user_id": message.chat.id,
                        "summ": amount,
                    },
                    "transaction_info": {
                        "transaction_date": transaction_date,
                        "category_name": transaction.get("category_name"),
                        "summ": summ,
                        "description": transaction.get("description"),
                    },
                }
            )

            text = (
                f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è\n\n"
                f"*–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {transaction_date}*\n"
                f'{summ} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {transaction["category_name"]}\n'
                f'–û–ø–∏—Å–∞–Ω–∏–µ: {transaction["description"]}\n\n'
                f"–£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é?"
            )

            await message.answer(f"{text}", reply_markup=delete_history_kb())
        else:
            await message.answer(
                text="–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            )

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


async def change_transaction_from_history(
    message: Message, state: FSMContext, split_text: str
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–µ callback).
    """
    logger.info(
        f"{message.chat.id} - –£—Ç–æ—á–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
    )

    transaction_id = int(split_text[6:])
    transaction = db_get_transaction(int(transaction_id), message.chat.id)

    if transaction:
        amount = float(transaction.get("amount"))
        summ = amount if amount >= 0 else -amount
        group = "Income" if amount >= 0 else "Expense"
        transaction_date = date.strftime(transaction["transaction_date"], "%d.%m.%Y")

        user_category = db_get_category(tg_id=message.chat.id)

        await state.update_data(
            {
                "id": transaction_id,
                "change_summ": "",
                "change_descr": "",
                "change_date": "",
                "change_category": "",
                "old_transaction_info": {
                    "old_date": transaction_date,
                    "old_summ": float(transaction["amount"]),
                    "old_category": transaction["category_name"],
                    "old_descr": transaction["description"],
                    "old_group": group,
                },
            },
        )
        await state.update_data(user_category)

        text = (
            f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è\n\n"
            f"*–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {transaction_date}*\n"
            f'{summ} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {transaction["category_name"]}\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ: {transaction["description"]}\n\n'
        )
        await state.set_state(UserState.change_success_transaction_details)

        await message.answer(
            text=f"{text}–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?",
            reply_markup=change_success_transaction_details_kb(),
        )
    else:
        await message.answer(
            text=f"–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        )
