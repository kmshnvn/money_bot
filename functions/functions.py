from datetime import date, datetime, timedelta
from typing import List, Dict, Union

from loguru import logger


def get_start_date() -> Dict[str, date]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ /start.
    –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–≥–æ–¥–Ω—è 2 —á–∏—Å–ª–æ (—Å–±), —Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏, –∞ –Ω–µ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞.

    :return:
    """
    try:
        today = date.today()
        week_number = today.isocalendar()[1]
        month = today.month
        year = today.year

        first_day_of_week = datetime.strptime(f'{year}-W{week_number}-1', "%Y-W%W-%w").date()
        first_day_of_month = datetime.strptime(f'{year}-{month}-1', '%Y-%m-%d').date()
        last_day_of_week = first_day_of_week + timedelta(days=6)

        if first_day_of_month < first_day_of_week:
            end_date = first_day_of_month
        else:
            end_date = first_day_of_week

        logger.debug(f'–°–æ–±—Ä–∞–ª–∏ –¥–∞—Ç—ã')

        return {
            'today': today,
            'end_date': end_date,
            'start_week': first_day_of_week,
            'end_week': last_day_of_week,
            'start_month': first_day_of_month,
        }

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')


def calculate_statistics(
    query: List[Dict[str, Union[str, float]]],
    first_day_of_week: date,
    last_day_of_week: date,
    first_day_of_month: date,
) -> Dict[str, List[float]]:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    :param query:
    :param first_day_of_week:
    :param first_day_of_month:
    :param last_day_of_week:
    :return:
    """
    try:
        today = date.today()

        today_result = []
        week_result = []
        month_result = []

        for elem in query:
            if elem.get('transaction_date') >= first_day_of_month:
                month_result.append(float(elem.get('amount')))
                if elem.get('transaction_date') == today:
                    today_result.append(float(elem.get('amount')))

        for elem in query:
            if first_day_of_week <= elem.get('transaction_date') <= last_day_of_week:
                week_result.append(float(elem.get('amount')))

        result = {
            'today': today_result,
            'week': week_result,
            'month': month_result,
        }

        logger.debug(f'–°–æ–±—Ä–∞–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')

        return result
    except Exception as ex:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex}')
        return {}


def create_history_text(text: str, history: List) -> str:
    print(history)
    today_date = date.today()
    date_list = []
    category_list = []

    for day_history in history[:5]:
        user_date = day_history.get('transaction_date')
        if user_date not in date_list:
            date_list.append(user_date)
            user_date = '–°–µ–≥–æ–¥–Ω—è' if user_date == today_date else user_date
            text += f'üìÜ*{user_date}*\n\n'
            category_list = []

        category = day_history.get('category_name')

        if category not in category_list:
            text += f'üîπ*{category}*\n\n'
            category_list.append(category)

        summ = day_history.get('amount')
        descr = day_history.get('description')
        history_id = day_history.get('id')

        text += f"{float(summ)} ‚ÇΩ | (–£–¥–∞–ª–∏—Ç—å /del{history_id})\n" \
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n\n" \

        history.remove(day_history)

    return text

