from datetime import date, datetime, timedelta
from typing import List, Dict, Union

from loguru import logger

from config_data.config import MONTH_NAME

HISTORY_DISPLAY_LIMIT = 15


def get_start_date() -> Dict[str, date]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ /start.
    –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–≥–æ–¥–Ω—è 2 —á–∏—Å–ª–æ (—Å–±), —Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏, –∞ –Ω–µ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞.

    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–æ–≤.
    """
    try:
        today = date.today()
        week_number = today.isocalendar()[1]
        month = today.month
        year = today.year

        first_day_of_week = datetime.strptime(
            f"{year}-W{week_number}-1", "%Y-W%W-%w"
        ).date()
        first_day_of_month = datetime.strptime(f"{year}-{month}-1", "%Y-%m-%d").date()
        last_day_of_week = first_day_of_week + timedelta(days=6)

        end_date = (
            first_day_of_month
            if first_day_of_month < first_day_of_week
            else first_day_of_week
        )

        logger.debug(f"–°–æ–±—Ä–∞–ª–∏ –¥–∞—Ç—ã")

        return {
            "today": today,
            "end_date": end_date,
            "start_week": first_day_of_week,
            "end_week": last_day_of_week,
            "start_month": first_day_of_month,
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def calculate_statistics(
    query: List[Dict[str, Union[str, float]]],
    first_day_of_week: date,
    last_day_of_week: date,
    first_day_of_month: date,
) -> Dict[str, List[float]]:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    :param query: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
    :param first_day_of_week: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏.
    :param last_day_of_week: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏.
    :param first_day_of_month: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.
    """
    try:
        today = date.today()

        today_result = []
        week_result = []
        month_result = []

        for elem in query:
            if elem.get("transaction_date") >= first_day_of_month:
                month_result.append(float(elem.get("amount")))
                if elem.get("transaction_date") == today:
                    today_result.append(float(elem.get("amount")))

        for elem in query:
            if first_day_of_week <= elem.get("transaction_date") <= last_day_of_week:
                week_result.append(float(elem.get("amount")))

        result = {
            "today": today_result,
            "week": week_result,
            "month": month_result,
        }

        logger.debug(f"–°–æ–±—Ä–∞–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        return result
    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex}")
        return {}


def create_history_text(text: str, history: List[Dict[str, Union[str, float]]]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.

    :param text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
    :param history: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
    :return: –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    """
    today_date = date.today()
    date_list = []

    history_to_remove = []
    for day_history in history[:HISTORY_DISPLAY_LIMIT]:
        print(day_history)
        user_date = day_history.get("transaction_date")
        if user_date not in date_list:
            date_list.append(user_date)
            user_date = "–°–µ–≥–æ–¥–Ω—è" if user_date == today_date else user_date
            text += f"üìÜ*{user_date}*\n\n"

        summ = day_history.get("amount")
        descr = day_history.get("description")
        history_id = day_history.get("id")
        category = day_history.get("category_name")

        text += (
            f"{float(summ)} ‚ÇΩ | *{category}*\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n"
            f"(–£–¥–∞–ª–∏—Ç—å /del{history_id})\n\n"
        )

        history_to_remove.append(day_history)

    for item in history_to_remove:
        history.remove(item)

    return text


def text_of_stat(history_list: Dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏.

    :param history_list: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    :return: –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    date_list = []
    text = ""

    sorted_data = sorted(
        history_list, key=lambda x: datetime.strptime(x["year_month"], "%Y-%m")
    )

    for history in sorted_data:
        summ = float(history["amount"])
        year_month = history["year_month"]
        year, month = year_month.split("-")
        month_name = MONTH_NAME[int(month)]

        if year_month not in date_list:
            text += f"\nüîπ*{month_name} {year}*\n\n"
            date_list.append(year_month)

        text += f"  üî∏{history['category_name']}: {summ} ‚ÇΩ\n"

    if not text:
        text = f"\n–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞—Ç –Ω–µ –±—ã–ª–æ"

    return text
