from aiogram.fsm.context import FSMContext
from loguru import logger
from aiogram import Router, F
from aiogram.filters.command import Command
from aiogram.types import Message

from database.database import db_get_main_statistic
from database.model import User, Balance, Account
from database.states import UserState
from keyboards.reply_keyboards import main_kb, start_kb

router = Router()

@router.message(Command('start'))
@router.message(F.text.contains('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def bot_start(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /start.
    –°–æ–∑–¥–∞–µ—Ç –ë–î, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
    """

    logger.info(f'{message.chat.id} - –∫–æ–º–∞–Ω–¥–∞ start')

    if not User.get_or_none(telegram_id=message.from_user.id):
        user = User.create(username=message.from_user.full_name, telegram_id=message.chat.id)
        account = Account.create(user=user)
        Balance.create(user=user, account=account)
        logger.info('–°–æ–∑–¥–∞–ª –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

        await message.answer(
            text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                 f"\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–µ—Ä–∂–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º\n"
                 f"\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                 f"\n–ù–∞—á–Ω–µ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç",
            parse_mode='Markdown',
            reply_markup=start_kb()
        )
    else:
        logger.info('–¢–∞–∫–æ–π id —É–∂–µ –µ—Å—Ç—å. –ë–∞–∑—ã –Ω–µ —Å—Ç–∞–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å')

        user_transactions = db_get_main_statistic(message.chat.id)
        text = get_statistic_text(user_transactions)

        await message.answer(
            text=f"{message.from_user.first_name}, –≤–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                 f"{text}",
            parse_mode='Markdown',
            reply_markup=main_kb()
        )

    await state.set_state(UserState.default)


def get_statistic_text(user_transactions) -> str:
    text = ''
    for key, value in user_transactions.items():
        period = ''
        if key == 'today':
            period = '–ó–∞ —Å–µ–≥–æ–¥–Ω—è'
        elif key == 'week':
            period = '–° –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏'
        elif key == 'month':
            period = '–° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞'

        text += f'\nüîπ*{period}*\n\n'

        if not value:
            text += '–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–æüòõ\n'
        else:
            income = 0
            expense = 0

            for elem in value:
                amount = float(elem)
                if amount < 0:
                    expense += amount
                else:
                    income += amount

            result = income + expense

            if income > 0:
                text += f'–î–æ—Ö–æ–¥: {income} ‚ÇΩ\n'
            if expense < 0:
                text += f'–†–∞—Å—Ö–æ–¥—ã: {expense} ‚ÇΩ\n'
            text += f'–í—Å–µ–≥–æ: {result} ‚ÇΩ\n'

    return text
