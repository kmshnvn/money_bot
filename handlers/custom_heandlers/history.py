from datetime import datetime, date
from typing import Tuple, Dict

from aiogram import F
from loguru import logger

from aiogram.filters import Command, Text
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.states import UserState
from database.database import (
    db_get_history,
    db_get_transaction,
    db_delete_transaction,
    db_get_history_transaction, db_get_custom_date_history,
)
from functions import simple_cal_callback, SimpleCalendar
from functions.functions import create_history_text, text_of_stat
from handlers.default_heandlers.start import router
from keyboards.inline_keyboards import (
    change_date,
    main_history_inline_kb,
    transaction_history,
    delete_history_kb,

)


@router.message(Command('history'))
@router.message(F.text.contains('–ò—Å—Ç–æ—Ä–∏—è'))
async def history(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /history
    """
    try:
        logger.info(f'{message.chat.id} - history.py | –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã /history')
        await state.set_data({})

        if not history:
            await message.answer(f'–ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ—â–µ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É')
        else:
            await message.answer(
                f'*–≠—Ç–æ –º–µ–Ω—é —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.*\n\n'
                f'–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–∏—Ç—å –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. '
                f'–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üìä*–°—Ç–∞—Ç–∏—Å–∏–∫–∞*, '
                f'—Ç–æ —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–±–æ–±—â–µ–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ '
                f'–∏ –ø–æ–Ω—è—Ç—å –∫—É–¥–∞ —É—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–µ–Ω–µ–≥',
                parse_mode='Markdown',
                reply_markup=main_history_inline_kb()
            )

            await state.set_state(UserState.main_history)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ {ex}')
        await message.edit_text('ü§ï–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.callback_query(Text('back_to_main_history'))
async def callback_history(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        logger.info(f'{callback.message.chat.id} - history.py | –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é history')
        await state.set_data({})

        await callback.message.edit_text(
            f'*–≠—Ç–æ –º–µ–Ω—é —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.*\n\n'
            f'–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–∏—Ç—å –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. '
            f'–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üìä*–°—Ç–∞—Ç–∏—Å–∏–∫–∞*, '
            f'—Ç–æ —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–±–æ–±—â–µ–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ '
            f'–∏ –ø–æ–Ω—è—Ç—å –∫—É–¥–∞ —É—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–µ–Ω–µ–≥',
            parse_mode='Markdown',
            reply_markup=main_history_inline_kb()
        )

        await state.set_state(UserState.main_history)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ {ex}')
        await callback.message.edit_text('ü§ï–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.callback_query(Text('history_of_transactions'))
async def user_transaction_history(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        logger.info(f'{callback.message.chat.id} - –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åc–∫—É—é –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await state.set_state(UserState.transaction_history)

        start_date, end_date = create_date(await state.get_data())

        if start_date and end_date:
            history = db_get_custom_date_history(callback.message.chat.id, start_date, end_date)
            text = create_history_text('', list(history))
            if text == '':
                full_text = f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ —Å {start_date} –ø–æ {end_date} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
            else:
                full_text = f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ {start_date} - {end_date}\n\n' + text

        else:
            history = db_get_history(callback.message.chat.id)
            text = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n'
            full_text = create_history_text(text, list(history))

        await callback.message.edit_text(
            f'{full_text}',
            parse_mode='Markdown',
            reply_markup=transaction_history()
        )
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ {ex}')
        await callback.message.edit_text('ü§ï–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(F.text.startswith('/del'))
async def check_delete_transaction(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.info(f'{message.chat.id} - –£—Ç–æ—á–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')

        transaction_id = message.text[4:]
        transaction = db_get_transaction(transaction_id)

        amount = float(transaction.get("amount"))
        summ = amount if amount >= 0 else -amount

        await state.set_data({
            'id': transaction_id,
            'user_id': message.chat.id,
            'summ': amount,
        })

        text = (
            f'–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è\n\n'
            f'–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {transaction["transaction_date"]}\n'
            f'{summ} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {transaction["category_name"]}\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ: {transaction["description"]}\n\n'
            f'–£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é?'
        )

        await message.answer(
            f'{text}',
            parse_mode='Markdown',
            reply_markup=delete_history_kb()
        )

        await state.set_state(UserState.delete_transaction)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}')
        await message.answer('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.callback_query(UserState.delete_transaction, Text('delete_transaction'))
async def delete_transaction(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.info(f'{callback.message.chat.id} - –£—Ç–æ—á–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')

        user_dict = await state.get_data()
        db_delete_transaction(user_dict)

        await callback.message.edit_text(text=f'–£–¥–∞–ª–∏–ª', parse_mode='Markdown')
        await state.set_state(UserState.default)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}')
        await callback.message.edit_text(
            'ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç'
        )


@router.callback_query(Text('user_statistic'))
async def month_statistic(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".
    """
    try:
        logger.info(f'{callback.message.chat.id} - –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')

        history_list, start_date, end_date = db_get_history_transaction(
            tg_id=callback.message.chat.id,
        )
        text = text_of_stat(history_list)

        await callback.message.edit_text(
            text=f'–ò—Å—Ç–æ—Ä–∏—è —Å {start_date} –ø–æ {end_date}:\n{text}',
            parse_mode='Markdown',
            reply_markup=change_date()
        )
        await state.set_state(UserState.statistic_history)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex}')
        await callback.message.edit_text(
            'ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç'
        )


@router.callback_query(Text('change_date'))
async def date_statistic(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    try:
        await callback.message.edit_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞',
            reply_markup=await SimpleCalendar().start_calendar()
        )
        await state.update_data({'user_state': await state.get_state()})
        await state.set_state(UserState.start_date_history)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex}')
        await callback.message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.callback_query(UserState.start_date_history, simple_cal_callback.filter())
@router.callback_query(UserState.end_date_history, simple_cal_callback.filter())
async def process_simple_calendar_history(
        callback_query: CallbackQuery,
        callback_data: dict,
        state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    try:

        my_state = await state.get_state()
        selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)

        if selected and my_state == 'UserState:start_date_history':
            new_date = date.strftime("%d.%m.%Y")
            await callback_query.message.edit_text(
                f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ {new_date}\n'
                f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞',
                reply_markup=await SimpleCalendar().start_calendar()
            )
            await state.update_data({'start_date': new_date})
            await state.set_state(UserState.end_date_history)

        elif selected and my_state == 'UserState:end_date_history':

            new_date = date.strftime("%d.%m.%Y")
            user_dict = await state.get_data()
            start_date = user_dict.get("start_date")

            if new_date < start_date:
                start_date, new_date = new_date, start_date
                await state.update_data({'start_date': start_date, 'end_date': new_date})
                print(f'–ø–æ–º–µ–Ω—è–ª –¥–∞–Ω–Ω—ã–µ {start_date}, {new_date}')
            else:
                await state.update_data({'end_date': new_date})

            await callback_query.message.edit_text(
                f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ {start_date} - {new_date}\n'
            )

            user_state = user_dict.get('user_state')
            print(user_state)
            if user_state == 'UserState:transaction_history':
                await user_transaction_history(callback_query, state)
            elif user_state == 'UserState:statistic_history':
                await month_custom_date_statistic(callback_query.message, state)
            else:
                await callback_query.message.edit_text(
                    f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã, —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–ºüòµ‚Äçüí´',
                )
                await history(callback_query.message, state)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex}')
        await callback_query.message.edit_text(
            'ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç'
        )


def create_date(user_dict: Dict) -> Tuple[date | None, date | None]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    start_date = datetime.strptime(user_dict.get('start_date'), '%d.%m.%Y').date() \
        if user_dict.get('start_date') \
        else None

    end_date = datetime.strptime(user_dict.get('end_date'), '%d.%m.%Y').date() \
        if user_dict.get('end_date') \
        else None

    return start_date, end_date


async def month_custom_date_statistic(message: Message, state: FSMContext) -> None:
    """
    –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ —Å –¥–∞—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info(f'{message.chat.id} - –í—ã–≤–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –¥–∞—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

        begin_history, end_history = create_date(await state.get_data())

        history_list, start_date, end_date = db_get_history_transaction(
            tg_id=message.chat.id,
            start_date=begin_history,
            end_date=end_history
        )
        text = text_of_stat(history_list)
        await message.edit_text(
            text=f'–ò—Å—Ç–æ—Ä–∏—è —Å {start_date} –ø–æ {end_date}:\n{text}',
            parse_mode='Markdown',
            reply_markup=change_date()
        )
        await state.set_state(UserState.statistic_history)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')
