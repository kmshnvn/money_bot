from aiogram import F
from loguru import logger

from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from config_data.config import MONTH_NAME
from database.states import UserState
from database.database import (
    db_get_history,
    db_get_transaction,
    db_delete_transaction,
    db_get_history_transaction,
)
from functions.functions import create_history_text
from handlers.default_heandlers.start import router
from keyboards.reply_keyboards import (
    history_kb,
    delete_history_kb,
    main_kb,
)


@router.message(Command('history'))
@router.message(F.text.contains('–ò—Å—Ç–æ—Ä–∏—è'))
async def history(message: Message, state: FSMContext) -> None:
    """    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /history

    –°–º–æ—Ç—Ä–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –∏—â–µ—Ç –≤—Å–µ –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    –ï—Å–ª–∏ –¥–∞—Ç –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º, –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–∞—Ç –Ω–∞–π–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ -
    –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è,
    –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞
    """
    try:
        logger.info(f'{message.chat.id} - history.py | –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã /history')

        history = db_get_history(message.chat.id)

        if not history:
            await message.answer(f'–ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ—â–µ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É')
        else:
            text = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π\n\n'

            text = create_history_text(text, list(history))

            await message.answer(
                f'{text}',
                parse_mode='Markdown',
                reply_markup=history_kb()
            )

            await state.set_state(UserState.main_history)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ {ex}')
        await message.answer('ü§ï–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(F.text.startswith('/del'))
async def check_delete_transaction(message: Message, state: FSMContext) -> None:
    transaction_id = message.text[4:]
    transaction = db_get_transaction(transaction_id)

    await state.set_data({'id': transaction_id})

    amount = float(transaction.get("amount"))
    summ = amount if amount >= 0 else -amount

    text = f'–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è\n\n' \
           f'–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {transaction["transaction_date"]}\n' \
           f'{summ} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {transaction["category_name"]}\n' \
           f'–û–ø–∏—Å–∞–Ω–∏–µ: {transaction["description"]}\n\n' \
           f'–£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é?'

    await message.answer(
        f'{text}',
        parse_mode='Markdown',
        reply_markup=delete_history_kb()
    )

    await state.set_state(UserState.delete_transaction)


@router.message(UserState.delete_transaction, F.text.contains('–£–¥–∞–ª—è–µ–º'))
async def delete_transaction(message: Message, state: FSMContext) -> None:
    user_dict = await state.get_data()
    db_delete_transaction(user_dict.get('id'))

    await message.answer(text=f'–£–¥–∞–ª–∏–ª', parse_mode='Markdown', reply_markup=main_kb())
    await state.set_state(UserState.default)


@router.message(UserState.main_history, F.text.contains('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def month_statistic(message: Message, state: FSMContext) -> None:
    income = 0
    expenses = 0
    date_list = []
    date_dict = {}
    text = '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ 3 –º–µ—Å—è—Ü–∞:\n'

    history_list = db_get_history_transaction(message.chat.id)

    for history in history_list[::-1]:
        summ = float(history['amount'])
        year_month = history['year_month']
        year, month = year_month.split('-')
        month_name = MONTH_NAME[int(month)]

        if year_month not in date_list:
            text += f'\nüîπ*{month_name} {year}*\n\n'
            date_list.append(year_month)

        text += f"  üî∏{history['category_name']}: {summ} ‚ÇΩ\n"

    await message.answer(text)
