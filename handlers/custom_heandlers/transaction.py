from datetime import date

from loguru import logger

from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.types import CallbackQuery

from database.database import (
    db_get_category,
    db_create_transaction,
    db_create_category,
    db_get_balance,
)

from database.states import UserState
from handlers.default_heandlers.start import router
from functions import simple_cal_callback, SimpleCalendar
from keyboards.reply_keyboards import (
    user_category_kb,
    transaction_descr_kb,
    transaction_main_kb,
    default_category_kb,
    save_category_kb,
    transaction_end_kb,
    transaction_save_kb,
)


@router.message(UserState.default, F.text.contains("–ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"))
@router.message(Command('transaction'))
@router.message(UserState.save_transaction, F.text.contains("–ò–∑–º–µ–Ω–∏—Ç—å"))
async def new_transaction(message: Message, state: FSMContext):
    logger.info('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É')

    user_category = db_get_category(tg_id=message.chat.id, user_name=message.from_user.full_name)

    if not user_category:
        logger.info('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç')

        await message.answer(
            text = f'*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.*\n\n'
                 f"–î–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç, "
                 f"—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä'"
                 f"\n\n*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤:*"
                 f"\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                 f"\n–ü—Ä–æ–¥—É–∫—Ç—ã"
                 f"\n–ö–∞—Ñ–µ"
                 f"\n–î–æ–º"
                 f"\n–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
                 f"\n–û–¥–µ–∂–¥–∞"
                 f"\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:*"
                 f"\n–ó–∞—Ä–ø–ª–∞—Ç–∞",
            parse_mode='Markdown',
            reply_markup=default_category_kb(),
        )
        await state.set_state(UserState.settings)

    else:
        balance = db_get_balance(message.chat.id)

        await state.set_data({
            'date': str(date.today()),
            'group': 'Expense',
            'summ': '',
            'category': '',
            'descr': '',
            'balance': float(balance),
        })
        await state.update_data(user_category)

        await state.set_state(UserState.transaction_group)
        await transaction_summ(message, state)


@router.message(UserState.transaction_summ, F.text.contains('–î–æ—Ö–æ–¥') | F.text.contains("–†–∞—Å—Ö–æ–¥"))
async def transaction_summ(message: Message, state: FSMContext):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏')
    text_handler = ['–†–∞—Å—Ö–æ–¥', '/transaction']

    user_dict = await state.get_data()
    group_name = user_dict.get('group')
    user_date = user_dict.get('date')
    balance = user_dict.get('balance')

    if message.text in text_handler:
        group_name = 'Expense'
    elif message.text == 'üí∞–î–æ—Ö–æ–¥üí∞':
        group_name = 'Income'

    await state.update_data({'group': group_name})

    if user_date == str(date.today()):
        user_date = '–°–µ–≥–æ–¥–Ω—è'

    text = f'–°–µ–π—á–∞—Å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance}\n\n'

    if group_name == 'Expense':
        await message.answer(
            text=text+
                 f'–ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–∞—Å—Ö–æ–¥–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.\n'
                 f'–î–∞—Ç–∞ - *{user_date}*\n\n'
                 f'–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?',
            parse_mode='Markdown',
            reply_markup=transaction_main_kb(group_name)
        )
    else:
        await message.answer(
            text=text +
                 f'–ó–∞–ø–∏—Å—ã–≤–∞—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.\n'
                 f'–î–∞—Ç–∞ - *{user_date}*\n\n'
                 f'–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ–ª—É—á–∏–ª–∏?',
            parse_mode='Markdown',
            reply_markup=transaction_main_kb(group_name)
        )
    await state.set_state(UserState.transaction_summ)



@router.message(
    UserState.transaction_summ,
    F.text.contains("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É")
)
async def transaction_group(message: Message, state: FSMContext):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏')
    await message.answer(
        f'–ö–æ–≥–¥–∞ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞?',
        parse_mode='Markdown',
        reply_markup=await SimpleCalendar().start_calendar()
    )


@router.callback_query(simple_cal_callback.filter())
async def process_simple_calendar(
        callback_query: CallbackQuery,
        callback_data: dict,
        state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.edit_text(
            f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ {date.strftime("%d.%m.%Y")}',
        )
        await state.update_data({'date': date.strftime('%Y-%m-%d')})
        await transaction_summ(callback_query.message, state)


@router.message(UserState.transaction_summ, F.text.regexp(r"^(\d+)$").as_("digits"))
async def transaction_category(message: Message, state: FSMContext):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏')

    await state.update_data({'summ': int(message.text)})

    user_dict = await state.get_data()
    group_name = 'Expense' if user_dict['group'] == 'Expense' else 'Income'

    await message.answer(
        f'–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è',
        parse_mode='Markdown',
        reply_markup=user_category_kb(user_dict[group_name])
    )

    await state.set_state(UserState.transaction_category)


@router.message(UserState.transaction_category)
async def transaction_description(message: Message, state: FSMContext):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')

    user_dict = await state.get_data()
    group_name = 'Expense' if user_dict['group'] == 'Expense' else 'Income'


    if message.text not in user_dict[group_name]:
        await state.update_data({'category': message.text})

        await message.answer(
            f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.\n'
            f'\n–ì—Ä—É–ø–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {user_dict["group"]}\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n'
            f'\n–î–æ–±–∞–≤–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
            parse_mode='Markdown',
            reply_markup=transaction_save_kb()
        )
        await state.set_state(UserState.transaction_new_category)

    else:
        await state.update_data({'category': message.text})

        await message.answer(
            f'–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
            parse_mode='Markdown',
            reply_markup=transaction_descr_kb()
        )

        await state.set_state(UserState.transaction_description)


@router.message(UserState.transaction_new_category, F.text.contains('–ó–∞–ø–∏—Å–∞—Ç—å'))
async def transaction_new_category(message: Message, state: FSMContext):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    user_dict = await state.get_data()

    group_name = 'Expense' if user_dict['group'] == 'Expense' else 'Income'
    new_category = {group_name: user_dict['category']}

    db_create_category(message.chat.id, new_category)

    await message.answer(
        f'–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
        parse_mode='Markdown',
        reply_markup=transaction_descr_kb()
    )

    await state.set_state(UserState.transaction_description)


@router.message(UserState.transaction_description)
async def transaction_check(message: Message, state: FSMContext):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')

    description = '' if message.text == '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' else message.text
    await state.update_data({'descr': description})
    user_dict = await state.get_data()

    await message.answer(
        f'–ü—Ä–æ–≤–µ—Ä–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é:\n'
        f'–î–∞—Ç–∞ - *{user_dict["date"]}*\n'
        f'–°—É–º–º–∞ - *{user_dict["summ"]}*\n'
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{user_dict["category"]}*\n'
        f'–û–ø–∏—Å–∞–Ω–∏–µ - *{description}*\n',
        parse_mode='Markdown',
        reply_markup=save_category_kb()
    )
    await state.set_state(UserState.save_transaction)


@router.message(UserState.save_transaction, F.text.contains('–ó–∞–ø–∏—Å–∞—Ç—å'))
async def add_new_category_settings(message: Message, state: FSMContext):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î')

    user_dict = await state.get_data()

    summ = user_dict['summ'] if user_dict['group'] == 'Income' else -user_dict['summ']

    transaction_dict = {
        'id': message.chat.id,
        'date': user_dict['date'],
        'summ': summ,
        'category': user_dict['category'],
        'descr': user_dict['descr'],
    }

    db_create_transaction(transaction_dict)

    await message.answer(
        f'–°–æ—Ö—Ä–∞–Ω–∏–ª. –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É?',
        parse_mode='Markdown',
        reply_markup=transaction_end_kb()
    )
    await state.set_state(UserState.default)


