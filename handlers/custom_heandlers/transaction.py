from datetime import date
import re

from loguru import logger

from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.types import CallbackQuery

from database.database import (
    db_get_category,
    db_create_transaction,
    db_create_category,
    db_get_balance,
)

from database.states import UserState
from handlers.default_heandlers.start import router
from functions import simple_cal_callback, SimpleCalendar
from keyboards.reply_keyboards import (
    user_category_kb,
    transaction_descr_kb,
    transaction_main_kb,
    default_category_kb,
    save_category_kb,
    transaction_end_kb,
    transaction_save_kb,
)


@router.message(F.text.contains("–ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"))
@router.message(Command('transaction'))
@router.message(UserState.save_transaction, F.text.contains("–ò–∑–º–µ–Ω–∏—Ç—å"))
async def new_transaction(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É')

        user_category = db_get_category(tg_id=message.chat.id, user_name=message.from_user.full_name)

        if not user_category:
            logger.info('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç')

            await message.answer(
                text=f'*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.*\n\n'
                     f"–î–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç, "
                     f"—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä'"
                     f"\n\n*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤:*"
                     f"\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå"
                     f"\n–ü—Ä–æ–¥—É–∫—Ç—ãü•¶"
                     f"\n–ö–∞—Ñ–µüçï"
                     f"\n–î–æ–ºüè°"
                     f"\n–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è‚úàÔ∏è"
                     f"\n–û–¥–µ–∂–¥–∞üëï"
                     f"\n–ö—Ä–∞—Å–æ—Ç–∞üíÜ‚Äç"
                     f"\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:*"
                     f"\n–ó–∞—Ä–ø–ª–∞—Ç–∞üí∞",
                parse_mode='Markdown',
                reply_markup=default_category_kb(),
            )
            await state.set_state(UserState.settings)

        else:
            balance = db_get_balance(message.chat.id)

            await state.set_data({
                'date': str(date.today()),
                'group': 'Expense',
                'summ': '',
                'category': '',
                'descr': '',
                'balance': float(balance),
            })
            await state.update_data(user_category)

            await state.set_state(UserState.transaction_group)
            await transaction_summ(message, state)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.transaction_summ, F.text.contains('–î–æ—Ö–æ–¥') | F.text.contains("–†–∞—Å—Ö–æ–¥"))
async def transaction_summ(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏')
        text_handler = ['–†–∞—Å—Ö–æ–¥', '/transaction']

        user_dict = await state.get_data()
        group_name = user_dict.get('group')
        user_date = user_dict.get('date')
        balance = user_dict.get('balance')

        if message.text in text_handler:
            group_name = 'Expense'
        elif message.text == 'üí∞–î–æ—Ö–æ–¥üí∞':
            group_name = 'Income'

        await state.update_data({'group': group_name})

        if user_date == str(date.today()):
            user_date = '–°–µ–≥–æ–¥–Ω—è'

        text = ''

        if group_name == 'Expense':
            await message.answer(
                text=(
                    text +
                    f'–ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–∞—Å—Ö–æ–¥–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.\n'
                    f'–î–∞—Ç–∞ - *{user_date}*\n\n'
                    f'–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?'
                ),
                parse_mode='Markdown',
                reply_markup=transaction_main_kb(group_name)
            )
        else:
            await message.answer(
                text=(
                    text +
                    f'–ó–∞–ø–∏—Å—ã–≤–∞—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.\n'
                    f'–î–∞—Ç–∞ - *{user_date}*\n\n'
                    f'–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ–ª—É—á–∏–ª–∏?'
                ),
                parse_mode='Markdown',
                reply_markup=transaction_main_kb(group_name)
            )
        await state.set_state(UserState.transaction_summ)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(
    UserState.transaction_summ,
    F.text.contains("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É")
)
async def transaction_group(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏')

        await message.answer(
            f'–ö–æ–≥–¥–∞ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞?',
            parse_mode='Markdown',
            reply_markup=await SimpleCalendar().start_calendar()
        )

        await state.set_state(UserState.transaction_group)

    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.callback_query(UserState.transaction_summ, simple_cal_callback.filter())
async def process_simple_calendar(
        callback_query: CallbackQuery,
        callback_data: dict,
        state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    """
    try:
        selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)

        if selected:
            formatted_date = date.strftime('%d.%m.%Y')
            await callback_query.message.edit_text(
                f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ {formatted_date}',
            )
            await state.update_data({'date': date.strftime('%Y-%m-%d')})
            await transaction_summ(callback_query.message, state)

    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {ex}')
        await callback_query.message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.transaction_summ, F.text.regexp(r"\d+(?:[\.,]\d{2})?"))
async def transaction_category(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ç–æ—á–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} - –°—É–º–º–∞ {message.text}. '
                    f'–£—Ç–æ—á–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏')
        user_text = message.text
        pattern = r'\d+(?:,\d{2})?'
        match = re.findall(pattern, user_text)[0]
        if match:
            corrected_number = match.replace(',', '.')
            user_text = user_text.replace(match, corrected_number)

        await state.update_data({'summ': float(user_text)})

        user_dict = await state.get_data()
        group_name = 'Expense' if user_dict['group'] == 'Expense' else 'Income'
        user_category = sorted(user_dict[group_name])

        await message.answer(
            f'–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è?\n'
            f'\n–ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å - '
            f'–ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
            parse_mode='Markdown',
            reply_markup=user_category_kb(user_category)
        )

        await state.set_state(UserState.transaction_category)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}')
        await message.answer(
            'ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç'
        )


@router.message(UserState.transaction_category)
async def transaction_description(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è. –£—Ç–æ—á–Ω–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')

        user_dict = await state.get_data()
        group_name = 'Expense' if user_dict['group'] == 'Expense' else 'Income'

        if message.text not in user_dict[group_name]:
            await state.update_data({'category': message.text})

            await message.answer(
                f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.\n'
                f'\n–ì—Ä—É–ø–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {user_dict["group"]}\n'
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n'
                f'\n–î–æ–±–∞–≤–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                parse_mode='Markdown',
                reply_markup=transaction_save_kb()
            )
            await state.set_state(UserState.transaction_new_category)
        else:
            await state.update_data({'category': message.text})

            await message.answer(
                f'–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                parse_mode='Markdown',
                reply_markup=transaction_descr_kb()
            )

            await state.set_state(UserState.transaction_description)

    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}')
        await message.answer('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.transaction_new_category, F.text.contains('–ó–∞–ø–∏—Å–∞—Ç—å'))
async def transaction_new_category(message: Message, state: FSMContext):
    """
    –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ç–æ—á–Ω–µ–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        user_dict = await state.get_data()

        group_name = 'Expense' if user_dict['group'] == 'Expense' else 'Income'
        new_category = {group_name: user_dict['category']}

        db_create_category(message.chat.id, new_category)

        await message.answer(
            f'–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
            parse_mode='Markdown',
            reply_markup=transaction_descr_kb()
        )

        await state.set_state(UserState.transaction_description)

    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}')
        await message.answer('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.transaction_description)
async def transaction_check(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
    """
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')

        description = '' if message.text == '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' else message.text
        await state.update_data({'descr': description})
        user_dict = await state.get_data()

        await message.answer(
            f'–ü—Ä–æ–≤–µ—Ä–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é:\n'
            f'–î–∞—Ç–∞ - *{user_dict["date"]}*\n'
            f'–°—É–º–º–∞ - *{user_dict["summ"]}*\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{user_dict["category"]}*\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ - *{description}*\n',
            parse_mode='Markdown',
            reply_markup=save_category_kb()
        )
        await state.set_state(UserState.save_transaction)

    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}')
        await message.answer('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.save_transaction, F.text.contains('–ó–∞–ø–∏—Å–∞—Ç—å'))
async def add_new_category_settings(message: Message, state: FSMContext):
    """
    –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î')

        user_dict = await state.get_data()

        summ = user_dict['summ'] if user_dict['group'] == 'Income' else -user_dict['summ']

        transaction_dict = {
            'id': message.chat.id,
            'date': user_dict['date'],
            'summ': summ,
            'category': user_dict['category'],
            'descr': user_dict['descr'],
        }

        db_create_transaction(transaction_dict)

        await message.answer(
            f'–°–æ—Ö—Ä–∞–Ω–∏–ª. –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É?',
            parse_mode='Markdown',
            reply_markup=transaction_end_kb()
        )
        await state.set_state(UserState.default)

    except Exception as ex:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î: {ex}')
        await message.answer('ü§ï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
