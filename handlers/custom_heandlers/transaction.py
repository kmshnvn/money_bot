from datetime import date, timedelta
import re

from fuzzywuzzy import fuzz
from loguru import logger

from aiogram.filters import Command, Text
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.types import CallbackQuery

from database.database import (
    db_get_category,
    db_create_transaction,
    db_create_category,
    db_get_balance,
    db_get_transaction,
    db_update_transaction,
)

from database.states import UserState
from handlers.default_heandlers.start import router
from functions import simple_cal_callback, SimpleCalendar
from keyboards.inline_keyboards import (
    transaction_main_kb,
    user_category_kb,
    transaction_descr_kb,
    transaction_save_kb,
    save_category_kb,
    change_transaction_details_kb,
    change_success_transaction,
    change_success_transaction_details_kb,
    update_category_kb,
)
from keyboards.reply_keyboards import default_category_kb


async def check_regexp_summ(text: str) -> str:
    pattern = r"\d+(,\d{1,2})?"
    match = re.findall(pattern, text)[0]
    if match:
        corrected_number = match.replace(",", ".")
        text = text.replace(match, corrected_number)
        return text
    else:
        return text


async def calculate_sum(text: str):
    num_list = text.split("+")
    summ = 0
    for elem in num_list:
        num = await check_regexp_summ(elem)
        summ += float(num)
    return str(summ)


async def check_change_transaction(user_data: dict):
    user_dict = user_data["old_transaction_info"]
    description = (
        user_data["change_descr"]
        if user_data["change_descr"] != ""
        else user_dict["old_descr"]
    )
    text_descr = "(–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)" if description == "" else description

    category = (
        user_data["change_category"]
        if user_data["change_category"] != ""
        else user_dict["old_category"]
    )
    user_date = (
        user_data["change_date"]
        if user_data["change_date"] != ""
        else user_dict["old_date"]
    )

    if user_dict["old_group"] == "Expense":
        if user_data["change_summ"] == "":
            amount = user_dict["old_summ"]
            summ = -user_dict["old_summ"]
        else:
            amount = -user_data["change_summ"]
            summ = user_data["change_summ"]
    else:
        amount, summ = user_data["change_summ"]

    transaction_dict = {
        "id": user_data["id"],
        "date": user_date,
        "summ": summ,
        "category": category,
        "descr": description,
        "amount": amount,
        "text_descr": text_descr,
    }

    return transaction_dict


@router.message(F.text.contains("–ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"))
@router.message(Command("transaction"))
@router.message(UserState.save_transaction, F.text.contains("–ò–∑–º–µ–Ω–∏—Ç—å"))
async def new_transaction(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.debug("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É")

        user_category = db_get_category(
            tg_id=message.chat.id, user_name=message.from_user.full_name
        )

        if not user_category:
            logger.info("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç")

            await message.answer(
                text=f"*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.*\n\n"
                f"–î–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç, "
                f"—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä'"
                f"\n\n*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤:*"
                f"\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå"
                f"\n–ü—Ä–æ–¥—É–∫—Ç—ãü•¶"
                f"\n–ö–∞—Ñ–µüçï"
                f"\n–î–æ–ºüè°"
                f"\n–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è‚úàÔ∏è"
                f"\n–û–¥–µ–∂–¥–∞üëï"
                f"\n–ö—Ä–∞—Å–æ—Ç–∞üíÜ‚Äç"
                f"\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:*"
                f"\n–ó–∞—Ä–ø–ª–∞—Ç–∞üí∞",
                reply_markup=default_category_kb(),
            )
            await state.set_state(UserState.settings)

        else:
            balance = db_get_balance(message.chat.id)
            default_group = "Expense"

            await state.set_data(
                {
                    "date": date.today().strftime("%d.%m.%Y"),
                    "group": default_group,
                    "summ": "",
                    "category": "",
                    "descr": "",
                    "balance": float(balance),
                }
            )
            await state.update_data(user_category)

            text = ""

            await message.answer(
                text=(
                    text + f"–ó–∞–ø–∏—Å—ã–≤–∞—é *—Ä–∞—Å—Ö–æ–¥–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.*\n"
                    f"–î–∞—Ç–∞ - –°–µ–≥–æ–¥–Ω—è\n\n"
                    f"–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?"
                ),
                reply_markup=transaction_main_kb(default_group),
            )
            await state.set_state(UserState.transaction_summ)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(
    UserState.transaction_summ,
    Text(
        text=["income", "expense", "change_for_today_date", "change_for_yesterday_date"]
    ),
)
@router.callback_query(UserState.transaction_category, Text("back"))
async def transaction_summ(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )
        await state.set_state(UserState.transaction_summ)

        not_today = True
        if callback.data == "change_for_today_date":
            await state.update_data({"date": date.today().strftime("%d.%m.%Y")})
        elif callback.data == "change_for_yesterday_date":
            yesterday = date.today() - timedelta(days=1)
            await state.update_data({"date": yesterday.strftime("%d.%m.%Y")})

        group_name = callback.data.title()

        user_dict = await state.get_data()

        user_date = user_dict.get("date")
        balance = user_dict.get("balance")
        if group_name not in ["Income", "Expense"]:
            group_name = user_dict.get("group")
        else:
            await state.update_data({"group": group_name})

        if user_date == date.today().strftime("%d.%m.%Y"):
            user_date = "–°–µ–≥–æ–¥–Ω—è"
            not_today = False

        text = ""
        if group_name == "Expense":
            await callback.message.edit_text(
                text=(
                    text + f"–ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–∞—Å—Ö–æ–¥–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.\n"
                    f"–î–∞—Ç–∞ - *{user_date}*\n\n"
                    f"–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?"
                ),
                reply_markup=transaction_main_kb(group_name, not_today),
            )
        else:
            await callback.message.edit_text(
                text=(
                    text + f"–ó–∞–ø–∏—Å—ã–≤–∞—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.\n"
                    f"–î–∞—Ç–∞ - *{user_date}*\n\n"
                    f"–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ–ª—É—á–∏–ª–∏?"
                ),
                reply_markup=transaction_main_kb(group_name, not_today),
            )

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.transaction_summ, Text("change_transaction_date"))
@router.callback_query(
    UserState.change_transaction_details, Text("change_transaction_date")
)
@router.callback_query(
    UserState.change_success_transaction_details, Text("change_transaction_date")
)
async def transaction_user_date(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    try:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞",
            reply_markup=await SimpleCalendar().start_calendar(),
        )
        await state.update_data({"user_state": await state.get_state()})
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.transaction_summ, simple_cal_callback.filter())
@router.callback_query(
    UserState.change_transaction_details, simple_cal_callback.filter()
)
@router.callback_query(
    UserState.change_success_transaction_details, simple_cal_callback.filter()
)
async def process_simple_calendar(
    callback_query: CallbackQuery, callback_data: dict, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    """
    try:
        selected, date = await SimpleCalendar().process_selection(
            callback_query, callback_data
        )

        if selected:
            user_state = await state.get_state()

            if user_state == "UserState:change_success_transaction_details":
                await state.update_data({"change_date": date.strftime("%d.%m.%Y")})
                await callback_change_success_transaction_check(callback_query, state)
            else:
                await state.update_data({"date": date.strftime("%d.%m.%Y")})

                if user_state == "UserState:transaction_summ":
                    await transaction_summ(callback_query, state)
                elif user_state == "UserState:change_transaction_details":
                    await callback_transaction_check(callback_query, state)
                else:
                    await callback_query.message.edit_text(
                        f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã, —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–ºüòµ‚Äçüí´",
                    )

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {ex}")
        await callback_query.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.message(
    UserState.transaction_summ,
    F.text.regexp(r"\d+(?:[,.]\d{1,2})?(?:\s*[-+]\s*\d+(?:[,.]\d{1,2})?)*"),
)
async def transaction_category(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ç–æ—á–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} - –°—É–º–º–∞ {message.text}. "
            f"–£—Ç–æ—á–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )
        pattern = "\d+(?:[,.]\d{1,2})?(?:\s*[-+]\s*\d+(?:[,.]\d{1,2})?)*"
        match = re.search(pattern, message.text)

        if match:
            user_text = await calculate_sum(message.text)
        else:
            user_text = await check_regexp_summ(message.text)
        await state.update_data({"summ": float(user_text)})
        user_state = await state.get_state()

        user_dict = await state.get_data()

        group_name = "Expense" if user_dict["group"] == "Expense" else "Income"

        user_category = user_dict.get(group_name)

        if user_category is not None:
            await message.answer(
                f"–°—É–º–º–∞ - {user_text}\n\n"
                f"–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è?\n"
                f"\n–ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å - "
                f"–ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                reply_markup=user_category_kb(sorted(user_category), group_name),
            )

        else:
            await message.answer(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π –µ—â–µ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é",
            )
        await state.set_state(UserState.transaction_category)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {ex}")
        await message.answer(
            f"üî∞–û–∂–∏–¥–∞—é —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏. –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            f"üî∏100\n"
            f"üî∏100.0\n"
            f"üî∏100,0\n"
            f"üî∏100.00\n"
            f"üî∏100,00\n\n"
            f"–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"üîπ100+100,0+..",
        )


@router.callback_query(UserState.transaction_new_category, Text("back"))
@router.callback_query(
    UserState.change_transaction_details, Text("change_transaction_category")
)
@router.callback_query(
    UserState.change_success_transaction_details, Text("change_transaction_category")
)
@router.callback_query(UserState.transaction_category, Text(text=["income", "expense"]))
async def transaction_category_back(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ç–æ—á–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏.
    –°—é–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞–∂–∞–ª "–ù–∞–∑–∞–¥".
    –õ–∏–±–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é, –ª–∏–±–æ —Å–º–µ–Ω–∞ –î–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id} - –°—É–º–º–∞ {callback.message.text}. "
            f"–£—Ç–æ—á–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )

        if callback.data in ["income", "expense"]:
            await state.update_data({"group": callback.data.title()})

        user_dict = await state.get_data()
        user_state = await state.get_state()
        await state.update_data({"user_state": user_state})

        if user_state == "UserState:change_success_transaction_details":
            group_name = user_dict["old_transaction_info"]["old_group"]
            user_category = user_dict.get(group_name)

            if user_category is not None:
                await callback.message.edit_text(
                    f"–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è?\n"
                    f"\n–ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å - "
                    f"–ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                    reply_markup=user_category_kb(sorted(user_category)),
                )

            else:
                await callback.message.edit_text(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π –µ—â–µ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é",
                )
            await state.set_state(UserState.change_transaction_category)

        else:
            group_name = "Expense" if user_dict["group"] == "Expense" else "Income"
            user_category = user_dict.get(group_name)

            if user_category is not None:
                await callback.message.edit_text(
                    f"–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è?\n"
                    f"\n–ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å - "
                    f"–ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                    reply_markup=user_category_kb(sorted(user_category), group_name),
                )
            else:
                await callback.message.edit_text(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π –µ—â–µ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é",
                )
            await state.set_state(UserState.transaction_category)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await callback.message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.message(UserState.transaction_category)
@router.message(UserState.change_transaction_category)
async def transaction_description(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è. –£—Ç–æ—á–Ω–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        category = message.text.title()
        user_dict = await state.get_data()

        group_name = "Expense" if user_dict["group"] == "Expense" else "Income"

        matching_category = None
        if user_dict.get(group_name) is not None:
            matching_category = next(
                (
                    elem
                    for elem in user_dict[group_name]
                    if fuzz.ratio(category, elem) > 80
                ),
                None,
            )

        if matching_category is None:
            await state.update_data({"category": category})

            await message.answer(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.\n"
                f"\n–ì—Ä—É–ø–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {group_name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"\n–î–æ–±–∞–≤–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                reply_markup=transaction_save_kb(),
            )
            await state.set_state(UserState.transaction_new_category)
        elif (
            user_dict.get("user_state")
            == "UserState:change_success_transaction_details"
        ):
            await state.update_data({"change_category": matching_category})
            await change_success_transaction_check(message, state)
        else:
            await state.update_data({"category": matching_category})
            if user_dict.get("user_state") == "UserState:change_transaction_details":
                await transaction_check_without_descr(message, state)
            else:
                await message.answer(
                    f"–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ\n"
                    f"–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                    reply_markup=transaction_descr_kb(),
                )

                await state.set_state(UserState.transaction_description)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(
    UserState.transaction_category, Text(startswith="transaction_category:")
)
@router.callback_query(
    UserState.change_transaction_category, Text(startswith="transaction_category:")
)
async def transaction_callback_description(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è. –£—Ç–æ—á–Ω–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id}. –£—Ç–æ—á–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )
        category = callback.data.split(":")[1]
        user_dict = await state.get_data()

        if (
            user_dict.get("user_state")
            == "UserState:change_success_transaction_details"
        ):
            await state.update_data({"change_category": category})
            await callback_change_success_transaction_check(callback, state)
        elif user_dict.get("user_state") == "UserState:change_transaction_details":
            await state.update_data({"category": category})
            await callback_transaction_check(callback, state)
        else:
            await state.update_data({"category": category})
            await callback.message.edit_text(
                f"–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                reply_markup=transaction_descr_kb(),
            )

            await state.set_state(UserState.transaction_description)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await callback.message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.transaction_new_category, Text("add_category"))
async def transaction_new_category(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ç–æ—á–Ω–µ–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id}. –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        user_dict = await state.get_data()
        print(user_dict)

        group_name = "Expense" if user_dict["group"] == "Expense" else "Income"
        new_category = {group_name: user_dict["category"]}

        category_list = user_dict.get(group_name)
        if category_list is not None:
            category_list.append(new_category[group_name])
        else:
            category_list = [new_category[group_name]]

        await state.update_data({group_name: category_list})

        db_create_category(callback.message.chat.id, new_category)
        if user_dict.get("user_state") == "UserState:change_transaction_details":
            await transaction_check_without_descr(callback.message, state)
        else:
            await callback.message.edit_text(
                f'–ó–∞–ø–∏—Å–∞–ª –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é {user_dict["category"]}\n\n'
                f"–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                reply_markup=transaction_descr_kb(),
            )

            await state.set_state(UserState.transaction_description)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}")
        await callback.message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.transaction_description)
@router.callback_query(UserState.change_transaction_details, Text("back"))
async def callback_transaction_check(callback: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
    """
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        user_dict = await state.get_data()
        description = user_dict.get("descr")
        text_descr = "(–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)" if description == "" else description

        await callback.message.edit_text(
            f"–ü—Ä–æ–≤–µ—Ä–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é:\n"
            f'–î–∞—Ç–∞ - *{user_dict["date"]}*\n'
            f'–°—É–º–º–∞ - *{user_dict["summ"]}*\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{user_dict["category"]}*\n'
            f"–û–ø–∏—Å–∞–Ω–∏–µ - {text_descr}\n",
            reply_markup=save_category_kb(),
        )
        await state.set_state(UserState.save_transaction)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await callback.message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


async def change_success_transaction_check(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î.
    """
    try:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î"
        )

        user_data = await state.get_data()

        transaction_dict = await check_change_transaction(user_data)

        await state.update_data({"transaction_dict": transaction_dict})

        await message.answer(
            f"–°–µ–π—á–∞—Å –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n"
            f'–î–∞—Ç–∞ - *{transaction_dict["date"]}*\n'
            f'–°—É–º–º–∞ - *{transaction_dict["summ"]}*\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{transaction_dict["category"]}*\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ - {transaction_dict["descr"]}\n',
            reply_markup=update_category_kb(),
        )
        await state.set_state(UserState.update_transaction)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.change_success_transaction_details, Text("back"))
async def callback_change_success_transaction_check(
    callback: CallbackQuery, state: FSMContext
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î.
    """
    try:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î"
        )

        user_data = await state.get_data()

        transaction_dict = await check_change_transaction(user_data)

        await state.update_data({"transaction_dict": transaction_dict})

        await callback.message.edit_text(
            f"–°–µ–π—á–∞—Å –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n"
            f'–î–∞—Ç–∞ - *{transaction_dict["date"]}*\n'
            f'–°—É–º–º–∞ - *{transaction_dict["summ"]}*\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{transaction_dict["category"]}*\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ - {transaction_dict["descr"]}\n',
            reply_markup=update_category_kb(),
        )
        await state.set_state(UserState.update_transaction)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await callback.message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


async def transaction_check_without_descr(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
    """
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")

        user_dict = await state.get_data()
        description = user_dict.get("descr")
        text_descr = "(–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)" if description == "" else description

        await message.answer(
            f"–ü—Ä–æ–≤–µ—Ä–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é:\n"
            f'–î–∞—Ç–∞ - *{user_dict["date"]}*\n'
            f'–°—É–º–º–∞ - *{user_dict["summ"]}*\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{user_dict["category"]}*\n'
            f"–û–ø–∏—Å–∞–Ω–∏–µ - {text_descr}\n",
            reply_markup=save_category_kb(),
        )
        await state.set_state(UserState.save_transaction)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.message(UserState.transaction_description)
@router.message(UserState.change_transaction_details_descr)
@router.message(UserState.change_success_transaction_details_descr)
async def transaction_check(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
    """
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")

        description = message.text
        user_state = await state.get_state()

        if user_state == "UserState:change_success_transaction_details_descr":
            await state.update_data({"change_descr": description})
            await change_success_transaction_check(message, state)
        else:
            await state.update_data({"descr": description})
            user_dict = await state.get_data()

            await message.answer(
                f"–ü—Ä–æ–≤–µ—Ä–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é:\n"
                f'–î–∞—Ç–∞ - *{user_dict["date"]}*\n'
                f'–°—É–º–º–∞ - *{user_dict["summ"]}*\n'
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{user_dict["category"]}*\n'
                f"–û–ø–∏—Å–∞–Ω–∏–µ - *{description}*\n",
                reply_markup=save_category_kb(),
            )
            await state.set_state(UserState.save_transaction)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex}")
        await message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.update_transaction, Text("update_transaction"))
async def add_new_category_settings(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î.
    """
    try:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î"
        )

        user_dict = await state.get_data()

        transaction_dict = user_dict["transaction_dict"]

        if db_update_transaction(transaction_dict, callback.message.chat.id):
            balance = db_get_balance(callback.message.chat.id)

            await callback.message.edit_text(
                text=(
                    f"‚úÖ–û–ø–µ—Ä–∞—Ü–∏—é –æ–±–Ω–æ–≤–∏–ª\n\n"
                    f"–î–∞—Ç–∞ - *{transaction_dict['date']}*\n"
                    f"–°—É–º–º–∞ - *{transaction_dict['summ']}*\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{transaction_dict['category']}*\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ - {transaction_dict['text_descr']}\n"
                ),
            )

            user_dict.pop("transaction_dict")
            user_dict.pop("old_transaction_info")
            user_dict.pop("change_category")
            user_dict.pop("change_date")
            user_dict.pop("change_descr")
            user_dict.pop("change_summ")
            user_dict.pop("id")

            await state.set_data(user_dict)

            user_dict = await state.get_data()

            await state.set_state(UserState.transaction_summ)
        else:
            await callback.message.edit_text(
                text=(
                    f"ü§ï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!"
                ),
            )
            await state.set_state(UserState.transaction_summ)
    #
    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î: {ex}")
        await callback.message.answer(
            "ü§ï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!"
        )


@router.callback_query(UserState.save_transaction, Text("add_transaction"))
async def add_new_category_settings(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id}. –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î")

        user_dict = await state.get_data()

        summ = (
            user_dict["summ"] if user_dict["group"] == "Income" else -user_dict["summ"]
        )

        transaction_dict = {
            "id": callback.message.chat.id,
            "date": user_dict["date"],
            "summ": summ,
            "category": user_dict["category"],
            "descr": user_dict["descr"],
        }

        transaction_id = db_create_transaction(transaction_dict)

        if transaction_id:
            balance = db_get_balance(callback.message.chat.id)
            default_group = "Expense"

            await state.update_data(
                {
                    "group": default_group,
                    "summ": "",
                    "category": "",
                    "descr": "",
                    "balance": float(balance),
                    "user_state": "",
                }
            )

            await callback.message.edit_text(
                text=(
                    f"–û–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∞–ª‚úÖ\n\n"
                    f'–î–∞—Ç–∞ - *{user_dict["date"]}*\n'
                    f'–°—É–º–º–∞ - *{user_dict["summ"]}*\n'
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{user_dict["category"]}*\n'
                    f'–û–ø–∏—Å–∞–Ω–∏–µ - *{user_dict["descr"]}*\n'
                ),
                reply_markup=change_success_transaction(transaction_id),
            )

            user_dict = await state.get_data()

            if user_dict.get("date") == date.today().strftime("%d.%m.%Y"):
                str_date = "–°–µ–≥–æ–¥–Ω—è"
                not_today = False
            else:
                str_date = user_dict.get("date")
                not_today = True

            await callback.message.answer(
                text=(
                    f"–ó–∞–ø–∏—Å—ã–≤–∞—é –Ω–æ–≤—É—é *—Ä–∞—Å—Ö–æ–¥–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.*\n"
                    f"–î–∞—Ç–∞ - {str_date}\n\n"
                    f"–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?"
                ),
                reply_markup=transaction_main_kb(default_group, not_today),
            )
            await state.set_state(UserState.transaction_summ)
        else:
            await callback.message.edit_text(
                text=(
                    f"ü§ï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!"
                ),
            )
            await state.set_state(UserState.transaction_summ)

    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î: {ex}")
        await callback.message.answer(
            "ü§ï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!"
        )


@router.callback_query(UserState.change_transaction_category, Text("back"))
@router.callback_query(UserState.save_transaction, Text("change_transaction"))
@router.callback_query(UserState.update_transaction, Text("change_transaction"))
@router.callback_query(
    UserState.transaction_summ, Text(startswith="change_success_transaction")
)
async def callback_change_unwritten_category(
    callback: CallbackQuery, state: FSMContext
):
    """
    –§—É–Ω–∫—Ü–∏—è. –£—Ç–æ—á–Ω—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏—Ç—å
    """
    logger.debug(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id} - "
        f"–£—Ç–æ—á–Ω—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"
    )

    user_state = await state.get_state()

    if user_state == "UserState:save_transaction":
        await state.set_state(UserState.change_transaction_details)

        await callback.message.edit_text(
            text=f"–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?",
            reply_markup=change_transaction_details_kb(),
        )

    elif (
        user_state == "UserState:update_transaction"
        or user_state == "UserState:change_transaction_category"
    ):
        await state.set_state(UserState.change_success_transaction_details)

        await callback.message.edit_text(
            text=f"–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?",
            reply_markup=change_transaction_details_kb(),
        )

    else:
        transaction_id = callback.data.split("-")[1]

        transaction = db_get_transaction(int(transaction_id))
        if transaction:
            amount = float(transaction.get("amount"))
            summ = amount if amount >= 0 else -amount
            group = "Income" if amount >= 0 else "Expense"
            transaction_date = date.strftime(
                transaction["transaction_date"], "%d.%m.%Y"
            )

            await state.update_data(
                {
                    "id": transaction_id,
                    "change_summ": "",
                    "change_descr": "",
                    "change_date": "",
                    "change_category": "",
                    "old_transaction_info": {
                        "old_date": transaction_date,
                        "old_summ": float(transaction["amount"]),
                        "old_category": transaction["category_name"],
                        "old_descr": transaction["description"],
                        "old_group": group,
                    },
                }
            )

            text = (
                f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è\n\n"
                f"*–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {transaction_date}*\n"
                f'{summ} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {transaction["category_name"]}\n'
                f'–û–ø–∏—Å–∞–Ω–∏–µ: {transaction["description"]}\n\n'
            )

            await callback.message.answer(
                text=f"{text}–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?",
                reply_markup=change_success_transaction_details_kb(),
            )

            await state.set_state(UserState.change_success_transaction_details)
        else:
            await callback.message.answer(
                text=f"–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            )


@router.callback_query(
    UserState.change_transaction_details, Text("change_transaction_summ")
)
@router.callback_query(
    UserState.change_success_transaction_details, Text("change_transaction_summ")
)
async def callback_change_unwritten_category(
    callback: CallbackQuery, state: FSMContext
):
    """
    –§—É–Ω–∫—Ü–∏—è. –ú–µ–Ω—è–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    """
    logger.debug(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id} - "
        f"–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"
    )

    user_state = await state.get_state()

    if user_state == "UserState:change_success_transaction_details":
        await state.set_state(UserState.change_success_transaction_details_summ)
    elif user_state == "UserState:change_transaction_details":
        await state.set_state(UserState.change_transaction_details_summ)

    await callback.message.edit_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É",
    )


@router.message(
    UserState.change_transaction_details_summ,
    F.text.regexp(r"\d+(?:[,.]\d{1,2})?(?:\s*[-+]\s*\d+(?:[,.]\d{1,2})?)*"),
)
@router.message(
    UserState.change_success_transaction_details_summ,
    F.text.regexp(r"\d+(?:[,.]\d{1,2})?(?:\s*[-+]\s*\d+(?:[,.]\d{1,2})?)*"),
)
async def transaction_category(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    """
    try:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} - –°—É–º–º–∞ {message.text}. "
            f"–£—Ç–æ—á–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )

        pattern = "\d+(?:[,.]\d{1,2})?(?:\s*[-+]\s*\d+(?:[,.]\d{1,2})?)*"
        match = re.search(pattern, message.text)
        if match:
            user_text = await calculate_sum(message.text)
        else:
            user_text = await check_regexp_summ(message.text)

        user_state = await state.get_state()

        if user_state == "UserState:change_success_transaction_details_summ":
            await state.update_data({"change_summ": float(user_text)})
            await change_success_transaction_check(message, state)

        elif user_state == "UserState:change_transaction_details_summ":
            await state.update_data({"summ": float(user_text)})
            await transaction_check_without_descr(message, state)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {ex}")
        await message.answer(
            f"üî∞–û–∂–∏–¥–∞—é —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏. –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            f"üî∏100\n"
            f"üî∏100.0\n"
            f"üî∏100,0\n"
            f"üî∏100.00\n"
            f"üî∏100,00\n\n"
            f"–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"üîπ100+100,0+..",
        )


@router.callback_query(
    UserState.change_transaction_details, Text("change_transaction_descr")
)
@router.callback_query(
    UserState.change_success_transaction_details, Text("change_transaction_descr")
)
async def callback_change_descr(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è. –£—Ç–æ—á–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞–∏–∏
    """
    logger.debug(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id} - –£—Ç–æ—á–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞–∏–∏"
    )
    await callback.message.edit_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    )

    user_state = await state.get_state()

    if user_state == "UserState:change_success_transaction_details":
        await state.set_state(UserState.change_success_transaction_details_descr)
    elif user_state == "UserState:change_transaction_details":
        await state.set_state(UserState.change_transaction_details_descr)
