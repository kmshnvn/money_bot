from loguru import logger
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import F

from handlers.default_heandlers.start import router


from database.database import db_create_category, db_get_category, db_change_category, start_table
from database.states import UserState
from keyboards.reply_keyboards import (
    default_category_kb,
    add_transaction_kb,
    exist_category_kb,
    group_category_kb,
    save_category_kb,
    user_category_kb,
)


@router.message(F.text.contains('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
@router.message(Command('settings'))
@router.message(UserState.transaction_new_category, F.text.contains('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'))
async def category_settings(message: Message, state: FSMContext):
    logger.info('–ù–∞—á–∞–ª–æ /Setting')
    await state.set_state(UserState.settings)
    user_category = db_get_category(tg_id=message.chat.id, user_name=message.from_user.full_name)

    if not user_category:
        logger.info('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç')

        await message.answer(
            text=f"–î–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç, "
                 f"—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä'"
                 f"\n\n*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤:*"
                 f"\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                 f"\n–ü—Ä–æ–¥—É–∫—Ç—ã"
                 f"\n–ö–∞—Ñ–µ"
                 f"\n–î–æ–º"
                 f"\n–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
                 f"\n–û–¥–µ–∂–¥–∞"
                 f"\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:*"
                 f"\n–ó–∞—Ä–ø–ª–∞—Ç–∞",
            parse_mode='Markdown',
            reply_markup=default_category_kb(),
        )
    else:
        logger.info('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –µ—Å—Ç—å')
        await state.set_data(user_category)

        text = ''

        for key, value in user_category.items():
            if key == 'Expense':
                text += '*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n'
                for elem in value:
                    text += f'{elem}\n'
            else:
                text += '\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:*\n'
                for elem in value:
                    text += f'{elem}\n'

        await message.answer(
            text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n"
                 f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç\n\n"
                 f"{text}"
                 f"\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
            parse_mode='Markdown',
            reply_markup=exist_category_kb(),
        )
    print(await state.get_data())

@router.message(UserState.settings, F.text.contains('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))
async def default_category_settings(message: Message, state: FSMContext):
    logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')

    default_category = {
        'Expense': ['–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ü—Ä–æ–¥—É–∫—Ç—ã', '–ö–∞—Ñ–µ', '–î–æ–º', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–û–¥–µ–∂–¥–∞'],
        'Income': ['–ó–∞—Ä–ø–ª–∞—Ç–∞']
    }
    db_create_category(message.chat.id, default_category)

    await message.answer(
        text=f'–û—Ç–ª–∏—á–Ω–æ, –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. '
             f'–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ /settings\n'
             f'–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–¥–∏–º —Å–≤–æ—é –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é',
        parse_mode='Markdown',
        reply_markup=add_transaction_kb()
    )
    await state.set_state(UserState.default)
    print(await state.get_data())



@router.message(
    UserState.settings,
    F.text.contains("–°–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") | F.text.contains("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é")
)
@router.message(UserState.save_category, Text('–ò–∑–º–µ–Ω–∏—Ç—å'))
async def custom_category_settings(message: Message, state: FSMContext):
    logger.info('–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    await state.set_state(UserState.custom_category_group)
    await message.answer(
        f'–ö —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?',
        reply_markup=group_category_kb(),
    )
    print(await state.get_data())



@router.message(UserState.custom_category_group, F.text.contains("–î–æ—Ö–æ–¥") | F.text.contains("–†–∞—Å—Ö–æ–¥"))
async def add_new_category_settings(message: Message, state: FSMContext):
    logger.info('–õ–æ–≤–∏–º –≥—Ä—É–ø–ø—É –∏ –∂–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    if message.text == "–î–æ—Ö–æ–¥":
        await state.update_data({'group': 'Income'})
    else:
        await state.update_data({'group': 'Expense'})

    await message.answer(
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        reply_markup=ReplyKeyboardRemove(),
    )

    await state.set_state(UserState.custom_category)
    print(await state.get_data())



@router.message(UserState.custom_category, F.text.contains('–ì–æ—Ç–æ–≤–æ'))
@router.message(UserState.custom_category_group, Text('–ì–æ—Ç–æ–≤–æ'))
async def add_new_category_settings(message: Message, state: FSMContext):
    logger.info('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –í—ã—Ö–æ–¥')

    await state.set_state(UserState.default)

    await message.answer(
        f'–û—Ç–ª–∏—á–Ω–æ, –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. '
        f'–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ /settings\n'
        f'–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–¥–∏–º —Å–≤–æ—é –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é',
        parse_mode='Markdown',
        reply_markup=add_transaction_kb()
    )
    print(await state.get_data())


@router.message(UserState.custom_category)
async def add_new_category_settings(message: Message, state: FSMContext):
    logger.info('–£—Ç–æ—á–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')


    if len(message.text) > 20:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤')
    else:
        data = await state.get_data()
        group = data['group']
        category = message.text

        if category.title() in data[group]:
            await message.answer(
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å\n'
                f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é',
                parse_mode='Markdown',
            )

        else:
            await state.update_data({'new_category': {group: category}})

            group_name = '–†–∞—Å—Ö–æ–¥'
            if group == 'Income':
                group_name = '–î–æ—Ö–æ–¥'

            await message.answer(
                f'–ü—Ä–æ–≤–µ—Ä–∏–º:\n'
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{group_name}*\n'
                f'–ù–∞–∑–≤–∞–Ω–∏–µ - *{message.text}*\n',
                parse_mode='Markdown',
                reply_markup=save_category_kb()
            )
            await state.set_state(UserState.save_category)
    print(await state.get_data())


@router.message(UserState.save_category, F.text.contains('–ó–∞–ø–∏—Å–∞—Ç—å'))
async def add_new_category_settings(message: Message, state: FSMContext):
    logger.info('–ó–∞–ø–∏—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î')

    category_dict = await state.get_data()

    if category_dict.get('new_category'):
        new_category = category_dict['new_category']
        group = category_dict['group']

        new_category_list = category_dict[group]
        new_category_list.append(new_category[group].title())

        db_create_category(message.chat.id, new_category)
        await state.update_data({group: new_category_list})
    else:
        db_create_category(message.chat.id, category_dict)

    await message.answer(
        f'–°–æ—Ö—Ä–∞–Ω–∏–ª. –¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–∞—è. \n–ö —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?',
        parse_mode='Markdown',
        reply_markup=group_category_kb()
    )
    await state.set_state(UserState.custom_category_group)
    print(await state.get_data())


@router.message(
    UserState.settings,
    F.text.contains('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é') | F.text.contains('–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
)
async def default_category_settings(message: Message, state: FSMContext):
    logger.info('–ó–∞—à–ª–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    user_dict = await state.get_data()
    category_list = []
    for key, value in user_dict.items():
        if key == 'Expense' or 'Income':
            for elem in value:
                category_list.append(elem)
    await state.update_data({'all_categories': category_list})

    await message.answer(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        parse_mode='Markdown',
        reply_markup=user_category_kb(category_list)
    )
    if message.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        await state.set_state(UserState.delete_category)
    else:
        await state.set_state(UserState.rename_category)

    print(await state.get_data())


@router.message(UserState.rename_category)
async def default_category_settings(message: Message, state: FSMContext):
    logger.info('–ò–∑–º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é')

    user_dict = await state.get_data()
    categories = user_dict['all_categories']
    if message.text not in user_dict['all_categories']:
        await message.answer(
            text=f'–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞',
            parse_mode='Markdown',
            reply_markup=user_category_kb(categories)
        )
    else:
        await message.answer(
            text=f'–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–º–∞–π–ª–∏–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—èü§©',
            parse_mode='Markdown',
            reply_markup=user_category_kb(categories)
        )

        await state.update_data({'last_name': message.text})
        await state.set_state(UserState.edit_category)


@router.message(UserState.edit_category)
async def default_category_settings(message: Message, state: FSMContext):
    logger.info('–ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')

    user_dict = await state.get_data()

    db_change_category(
        tg_id=message.chat.id,
        category_name=user_dict['last_name'],
        new_name=message.text
    )

    await message.answer(
        text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±–Ω–æ–≤–∏–ª —Å {user_dict["last_name"]} –Ω–∞ {message.text}',
        parse_mode='Markdown',
    )

    await category_settings(message, state)



@router.message(UserState.delete_category)
async def default_category_settings(message: Message, state: FSMContext):
    logger.info('–£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é')

    db_change_category(
        tg_id=message.chat.id,
        category_name=message.text,
    )

    await message.answer(
        text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è *{message.text}* —É–¥–∞–ª–µ–Ω–∞',
        parse_mode='Markdown',
    )

    await category_settings(message, state)
