from loguru import logger
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram import F

from handlers.default_heandlers.start import router


from database.database import db_create_category, db_get_category, db_change_category
from database.states import UserState
from keyboards.inline_keyboards import (
    user_category_kb,
    save_category_kb,
)

from keyboards.reply_keyboards import (
    default_category_kb,
    add_transaction_kb,
    exist_category_kb,
    group_category_kb,
    save_category_kb,
    user_category_kb,
)


@router.message(F.text.contains('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
@router.message(Command('settings'))
@router.message(UserState.transaction_new_category, F.text.contains('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'))
async def category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /Setting –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info('–ù–∞—á–∞–ª–æ /Setting')
        await state.set_state(UserState.settings)

        user_category = db_get_category(tg_id=message.chat.id, user_name=message.from_user.full_name)

        if not user_category:
            logger.info('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç')

            await message.answer(
                text=f"–î–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç, "
                     f"—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä'"
                     f"\n\n*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤:*"
                     f"\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå"
                     f"\n–ü—Ä–æ–¥—É–∫—Ç—ãü•¶"
                     f"\n–ö–∞—Ñ–µüçï"
                     f"\n–î–æ–ºüè°"
                     f"\n–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è‚úàÔ∏è"
                     f"\n–û–¥–µ–∂–¥–∞üëï"
                     f"\n–ö—Ä–∞—Å–æ—Ç–∞üíÜ‚Äç"
                     f"\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:*"
                     f"\n–ó–∞—Ä–ø–ª–∞—Ç–∞üí∞",
                parse_mode='Markdown',
                reply_markup=default_category_kb(),
            )
        else:
            logger.info('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –µ—Å—Ç—å')
            await state.set_data(user_category)

            text = ''

            for key, value in user_category.items():
                if key == 'Expense':
                    text += '*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n'
                    for elem in value:
                        text += f'{elem}\n'
                else:
                    text += '\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:*\n'
                    for elem in value:
                        text += f'{elem}\n'

            await message.answer(
                text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n"
                     f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç\n\n"
                     f"{text}"
                     f"\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
                parse_mode='Markdown',
                reply_markup=exist_category_kb(),
            )
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}')
        await message.answer('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.settings, F.text.contains('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))
async def default_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç.
    """
    try:
        logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')

        default_category = {
            'Expense': [
                "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå",
                "–ü—Ä–æ–¥—É–∫—Ç—ãü•¶",
                "–ö–∞—Ñ–µüçï",
                "–î–æ–ºüè°",
                "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è‚úàÔ∏è",
                "–û–¥–µ–∂–¥–∞üëï",
                "–ö—Ä–∞—Å–æ—Ç–∞üíÜ‚Äç",
            ],
            'Income': ['–ó–∞—Ä–ø–ª–∞—Ç–∞üí∞']
        }

        db_create_category(message.chat.id, default_category)

        await message.answer(
            text=f'–û—Ç–ª–∏—á–Ω–æ, –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. '
                 f'–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ /settings\n'
                 f'–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–¥–∏–º —Å–≤–æ—é –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é',
            parse_mode='Markdown',
            reply_markup=add_transaction_kb()
        )
        await state.set_state(UserState.default)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}')
        await message.answer('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(
    UserState.settings,
    F.text.contains("–°–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") | F.text.contains("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é")
)
@router.message(UserState.save_category, Text('–ò–∑–º–µ–Ω–∏—Ç—å'))
async def custom_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        logger.info('–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        await state.set_state(UserState.custom_category_group)

        await message.answer(
            f'–ö —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?',
            reply_markup=group_category_kb(),
        )
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.custom_category_group, F.text.contains("–î–æ—Ö–æ–¥") | F.text.contains("–†–∞—Å—Ö–æ–¥"))
async def add_new_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        logger.info('–õ–æ–≤–∏–º –≥—Ä—É–ø–ø—É –∏ –∂–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        if message.text == "–î–æ—Ö–æ–¥":
            await state.update_data({'group': 'Income'})
        else:
            await state.update_data({'group': 'Expense'})

        await message.answer(
            f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            reply_markup=ReplyKeyboardRemove(),
        )

        await state.set_state(UserState.custom_category)

        print(await state.get_data())
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}')
        await message.answer('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.custom_category, F.text.contains('–ì–æ—Ç–æ–≤–æ'))
@router.message(UserState.custom_category_group, F.text.contains('–ì–æ—Ç–æ–≤–æ'))
async def category_settings_complete(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.info('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –í—ã—Ö–æ–¥')

        await state.set_state(UserState.default)

        await message.answer(
            f'–û—Ç–ª–∏—á–Ω–æ, –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. '
            f'–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ /settings\n'
            f'–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–¥–∏–º —Å–≤–æ—é –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é',
            parse_mode='Markdown',
            reply_markup=add_transaction_kb()
        )

    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.custom_category)
async def add_new_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        logger.info('–£—Ç–æ—á–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')

        if len(message.text) > 20:
            await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            data = await state.get_data()
            group = data['group']
            another_group = 'Income' if group == 'Expense' else 'Expense'

            category = message.text

            if category.title() in data[group]:
                await message.answer(
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å\n'
                    f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é',
                    parse_mode='Markdown',
                )
            elif category.title() in data[another_group]:
                text_another_name = '–¥–æ—Ö–æ–¥–∞' if another_group == 'Income' else '—Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'

                await message.answer(
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö {text_another_name}\n'
                    f'–î–æ–±–∞–≤—å—Ç–µ —Å–º–∞–π–ª–∏–∫ ‚ûï,‚ûñ, (–î), (–†) –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ, '
                    f'—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –æ—Ç–ª–∏—á–∏—Ç—å –∏—Ö',
                    parse_mode='Markdown',
                )
            else:
                await state.update_data({'new_category': {group: category}})
                group_name = '–î–æ—Ö–æ–¥' if group == 'Income' else '–†–∞—Å—Ö–æ–¥'

                await message.answer(
                    f'–ü—Ä–æ–≤–µ—Ä–∏–º:\n'
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{group_name}*\n'
                    f'–ù–∞–∑–≤–∞–Ω–∏–µ - *{message.text}*\n',
                    parse_mode='Markdown',
                    reply_markup=save_category_kb()
                )
                await state.set_state(UserState.save_category)

    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.save_category, F.text.contains('–ó–∞–ø–∏—Å–∞—Ç—å'))
async def add_new_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        logger.info('–ó–∞–ø–∏—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î')

        category_dict = await state.get_data()

        if category_dict.get('new_category'):
            new_category = category_dict['new_category']
            group = category_dict['group']

            new_category_list = category_dict[group]
            new_category_list.append(new_category[group].title())

            db_create_category(message.chat.id, new_category)
            await state.update_data({group: new_category_list})
        else:
            db_create_category(message.chat.id, category_dict)

        await message.answer(
            f'–°–æ—Ö—Ä–∞–Ω–∏–ª. –¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–∞—è. \n–ö —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?',
            parse_mode='Markdown',
            reply_markup=group_category_kb()
        )
        await state.set_state(UserState.custom_category_group)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(
    UserState.settings,
    F.text.contains('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é') | F.text.contains('–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
)
async def default_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info('–ó–∞—à–ª–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        user_dict = await state.get_data()
        category_list = []

        for key, value in user_dict.items():
            if key in ('Expense', 'Income'):
                category_list.extend(value)

        await state.update_data({'all_categories': category_list})

        await message.answer(
            text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            parse_mode='Markdown',
            reply_markup=user_category_kb(category_list)
        )

        if message.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            await state.set_state(UserState.delete_category)
        else:
            await state.set_state(UserState.rename_category)

    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.rename_category)
async def default_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info('–ò–∑–º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é')

        user_dict = await state.get_data()
        categories = user_dict['all_categories']

        if message.text not in categories:
            await message.answer(
                text=f'–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞',
                parse_mode='Markdown',
                reply_markup=user_category_kb(categories)
            )
        else:
            await message.answer(
                text=f'–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–º–∞–π–ª–∏–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—èü§©',
                parse_mode='Markdown',
                reply_markup=user_category_kb(categories)
            )

            await state.update_data({'last_name': message.text})
            await state.set_state(UserState.edit_category)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.edit_category)
async def default_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info('–ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        user_dict = await state.get_data()

        db_change_category(
            tg_id=message.chat.id,
            category_name=user_dict['last_name'],
            new_name=message.text
        )

        await message.answer(
            text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±–Ω–æ–≤–∏–ª —Å {user_dict["last_name"]} –Ω–∞ {message.text}',
            parse_mode='Markdown',
        )

        await category_settings(message, state)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')


@router.message(UserState.delete_category)
async def delete_category(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info('–£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é')

        db_change_category(
            tg_id=message.chat.id,
            category_name=message.text,
        )

        await message.answer(
            text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è *{message.text}* —É–¥–∞–ª–µ–Ω–∞',
            parse_mode='Markdown',
        )

        await category_settings(message, state)
    except Exception as ex:
        logger.error(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}')
        await message.edit_text('ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç')
