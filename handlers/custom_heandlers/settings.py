from loguru import logger
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram import F

from handlers.default_heandlers.start import router


from database.database import db_create_category, db_get_category, db_change_category
from database.states import UserState
from keyboards.inline_keyboards import (
    user_category_kb,
    save_category_kb,
    exist_category_kb,
    group_category_kb,
)

from keyboards.reply_keyboards import (
    default_category_kb,
    main_kb,
)


@router.message(F.text.contains("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
@router.message(Command("settings"))
@router.message(
    UserState.transaction_new_category, F.text.contains("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
)
async def category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /Setting –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info("–ù–∞—á–∞–ª–æ /Setting")
        await state.set_state(UserState.settings)

        user_category = db_get_category(
            tg_id=message.chat.id, user_name=message.from_user.full_name
        )

        if not user_category:
            logger.info("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç")

            await message.answer(
                text="–î–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç, "
                "—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä'"
                "\n\n*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤:*"
                "\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå"
                "\n–ü—Ä–æ–¥—É–∫—Ç—ãü•¶"
                "\n–ö–∞—Ñ–µüçï"
                "\n–î–æ–ºüè°"
                "\n–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è‚úàÔ∏è"
                "\n–û–¥–µ–∂–¥–∞üëï"
                "\n–ö—Ä–∞—Å–æ—Ç–∞üíÜ‚Äç"
                "\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:*"
                "\n–ó–∞—Ä–ø–ª–∞—Ç–∞üí∞",
                reply_markup=default_category_kb(),
            )
        else:
            logger.info("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –µ—Å—Ç—å")
            await state.set_data(user_category)

            text = ""

            for key, value in user_category.items():
                if key == "Expense":
                    text += "*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
                    for elem in value:
                        text += f"{elem}\n"
                else:
                    text += "\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:*\n"
                    for elem in value:
                        text += f"{elem}\n"

            await message.answer(
                text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n"
                f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
                f"{text}"
                f"\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
                reply_markup=exist_category_kb(),
            )
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}")
        await message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.message(
    UserState.settings, F.text.contains("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
)
async def default_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç.
    """
    try:
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

        default_category = {
            "Expense": [
                "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå",
                "–ü—Ä–æ–¥—É–∫—Ç—ãü•¶",
                "–ö–∞—Ñ–µüçï",
                "–î–æ–ºüè°",
                "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è‚úàÔ∏è",
                "–û–¥–µ–∂–¥–∞üëï",
                "–ö—Ä–∞—Å–æ—Ç–∞üíÜ‚Äç",
            ],
            "Income": ["–ó–∞—Ä–ø–ª–∞—Ç–∞üí∞"],
        }

        db_create_category(message.chat.id, default_category)
        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ, –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. "
            "–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ /settings\n"
            "–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–¥–∏–º —Å–≤–æ—é –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üßÆ–ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'",
            reply_markup=main_kb(),
        )
        await state.set_state(UserState.default)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}")
        await message.answer(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.settings, Text("add_new_category"))
@router.callback_query(UserState.save_category, Text("change_transaction"))
async def custom_category_settings(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        await state.set_state(UserState.custom_category_group)
        await callback.message.edit_text(
            "–ö —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?",
            reply_markup=group_category_kb(),
        )
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(
    UserState.custom_category_group, Text(text=["income", "expense"])
)
async def add_new_category_settings(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        logger.info("–õ–æ–≤–∏–º –≥—Ä—É–ø–ø—É –∏ –∂–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        if callback.data == "income":
            await state.update_data({"group": "Income"})
        else:
            await state.update_data({"group": "Expense"})

        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        )

        await state.set_state(UserState.custom_category)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.custom_category_group, Text("ready"))
async def category_settings_complete(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        logger.info("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")

        await state.set_state(UserState.default)

        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
        )
        await category_settings(callback.message, state)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.message(UserState.custom_category)
async def add_new_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        logger.info("–£—Ç–æ—á–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

        if len(message.text) > 20:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            data = await state.get_data()
            group = data["group"]
            another_group = "Income" if group == "Expense" else "Expense"

            category = message.text

            if category.title() in data[group]:
                await message.answer(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å\n" f"–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é",
                )
            elif category.title() in data[another_group]:
                text_another_name = (
                    "–¥–æ—Ö–æ–¥–∞" if another_group == "Income" else "—Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
                )

                await message.answer(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö {text_another_name}\n"
                    f"–î–æ–±–∞–≤—å—Ç–µ —Å–º–∞–π–ª–∏–∫ ‚ûï,‚ûñ, (–î), (–†) –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ, "
                    f"—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –æ—Ç–ª–∏—á–∏—Ç—å –∏—Ö",
                )
            else:
                await state.update_data({"new_category": {group: category}})
                group_name = "–î–æ—Ö–æ–¥" if group == "Income" else "–†–∞—Å—Ö–æ–¥"

                await message.answer(
                    f"–ü—Ä–æ–≤–µ—Ä–∏–º:\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è - *{group_name}*\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ - *{message.text}*\n",
                    reply_markup=save_category_kb(),
                )
                await state.set_state(UserState.save_category)

    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}")
        await message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(UserState.save_category, Text("add_transaction"))
async def add_new_category_settings(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        logger.info("–ó–∞–ø–∏—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î")

        category_dict = await state.get_data()

        if category_dict.get("new_category"):
            new_category = category_dict["new_category"]
            group = category_dict["group"]

            new_category_list = category_dict[group]
            new_category_list.append(new_category[group].title())

            db_create_category(callback.message.chat.id, new_category)
            await state.update_data({group: new_category_list})
        else:
            db_create_category(callback.message.chat.id, category_dict)

        await callback.message.edit_text(
            f"‚úÖ–°–æ—Ö—Ä–∞–Ω–∏–ª",
        )
        await callback.message.answer(
            "–¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–∞—è. \n–ö —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?",
            reply_markup=group_category_kb(),
        )
        await state.set_state(UserState.custom_category_group)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(
    UserState.settings, Text(["delete_category", "change_category_name"])
)
async def default_category_settings(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info("–ó–∞—à–ª–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        user_dict = await state.get_data()
        category_list = []

        for key, value in user_dict.items():
            if key in ("Expense", "Income"):
                category_list.extend(value)

        await state.update_data({"all_categories": category_list})

        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            reply_markup=user_category_kb(category_list),
        )
        if callback.data == "delete_category":
            await state.set_state(UserState.delete_category)
        else:
            await state.set_state(UserState.rename_category)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(
    UserState.rename_category, Text(startswith="transaction_category:")
)
async def default_category_settings(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info("–ò–∑–º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

        category = callback.data.split(":")[1]
        await callback.message.edit_text(
            text="–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–º–∞–π–ª–∏–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—èü§©",
        )

        await state.update_data({"last_name": category})
        await state.set_state(UserState.edit_category)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.message(UserState.edit_category)
async def default_category_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info("–ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        user_dict = await state.get_data()

        db_change_category(
            tg_id=message.chat.id,
            category_name=user_dict["last_name"],
            new_name=message.text,
        )

        await message.answer(
            text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±–Ω–æ–≤–∏–ª —Å *{user_dict["last_name"]}* –Ω–∞ *{message.text}*',
        )

        await category_settings(message, state)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}")
        await message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )


@router.callback_query(
    UserState.delete_category, Text(startswith="transaction_category:")
)
async def delete_category(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info("–£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        category = callback.data.split(":")[1]
        db_change_category(
            tg_id=callback.message.chat.id,
            category_name=category,
        )

        await callback.message.edit_text(
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è *{category}* —É–¥–∞–ª–µ–Ω–∞",
        )

        await category_settings(callback.message, state)
    except Exception as ex:
        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}")
        await callback.message.edit_text(
            "ü§ï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Ç"
        )
